Index: LegacyEditor/LCE/FileInfo/FileInfo.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#include \"FileInfo.hpp\"\r\n\r\n#include \"LegacyEditor/LCE/MC/enums.hpp\"\r\n#include \"LegacyEditor/utils/dataManager.hpp\"\r\n\r\n#include \"include/png/crc.hpp\"\r\n\r\n\r\nstatic u32 c2n(const char chara) {\r\n    if (chara >= '0' && chara <= '9') { return chara - '0'; }\r\n    if (chara >= 'a' && chara <= 'f') { return chara - 'a' + 10; }\r\n    if (chara >= 'A' && chara <= 'F') { return chara - 'A' + 10; }\r\n    return 0;\r\n}\r\n\r\nstatic i64 stringToHex(const std::string& str) {\r\n    i64 result = 0;\r\n    const int stringSize = static_cast<int>(str.size());\r\n    for (size_t i = 0; i < stringSize; i++) { result = result * 16 + c2n(str[i]); }\r\n    return result;\r\n}\r\n\r\nstatic i64 stringToInt64(const std::string& str) {\r\n    i64 result = 0;\r\n    int sign = 1;\r\n    size_t index = 0;\r\n\r\n    if (str[0] == '-') {\r\n        sign = -1;\r\n        index++;\r\n    }\r\n\r\n    for (const int stringSize = static_cast<int>(str.size()); index < stringSize; index++) {\r\n        result = result * 10 + (str[index] - '0');\r\n    }\r\n\r\n    return result * sign;\r\n}\r\n\r\nstatic char n2c(const u32 num) {\r\n    if (num <= 9) {\r\n        return static_cast<char>('0' + num);\r\n    }\r\n    if (num >= 10 && num <= 15) {\r\n        return static_cast<char>('a' + (num - 10));\r\n    }\r\n    // Return a default value if num is out of the 0-15 range\r\n    return '0';\r\n}\r\n\r\nstatic std::string hexToString(i64 hex) {\r\n    if (hex == 0) {\r\n        return \"0\";\r\n    }\r\n\r\n    std::string result;\r\n    while (hex > 0) {\r\n        // result = n2c(hex % 16) + result;\r\n        result += n2c(hex % 16);\r\n        hex /= 16;\r\n    }\r\n    return result;\r\n}\r\n\r\nstatic std::string int64ToString(i64 num) {\r\n    if (num == 0) {\r\n        return \"0\";\r\n    }\r\n\r\n    std::string result;\r\n    const int sign = num < 0 ? -1 : 1;\r\n    num = std::abs(num);\r\n\r\n    while (num > 0) {\r\n        // result = static_cast<char>('0' + num % 10) + result;\r\n        result += static_cast<char>('0' + num % 10);\r\n        num /= 10;\r\n    }\r\n\r\n    if (sign == -1) {\r\n        result = \"-\" + result;\r\n    }\r\n    return result;\r\n}\r\n\r\nbool isPngHeader(DataManager& manager) {\r\n    static u8_vec PNG_HEADER{0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A};\r\n    const u8_vec fileHeader = manager.readIntoVector(8);\r\n    manager.decrementPointer(8);\r\n    return fileHeader == PNG_HEADER;\r\n}\r\n\r\n\r\nnamespace editor {\r\n\r\n    /**\r\n     * \\brief Gives FileInfo a default ico for creation\r\n     * TODO: write the code\r\n     */\r\n    void FileInfo::defaultThumbnail() {\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * \\brief presumes that the tEXt header is located second to last inside the png.\r\n     * \\param inFileStr\r\n     */\r\n    // TODO: idk formatting of header for nintendo consoles\r\n    void FileInfo::readFile(const std::string& inFileStr) {\r\n        DataManager manager;\r\n        manager.readFromFile(inFileStr);\r\n\r\n        // needs to be rewritten for different consoles\r\n        if (!isPngHeader(manager)) {\r\n            basesavename = manager.readWString(128);\r\n            if (!isPngHeader(manager)) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        isLoaded = true;\r\n\r\n        const u8* PNG_START = manager.ptr;\r\n\r\n        manager.incrementPointer(8);\r\n\r\n        while (!manager.isEndOfData()) {\r\n            const u8* PNG_END;\r\n            const u32 chunkLength = manager.readInt32();\r\n\r\n            if (std::string chunkType = manager.readString(4);\r\n                    chunkType != \"tEXt\") {\r\n\r\n                // this may not work\r\n                if (chunkType == \"IEND\") {\r\n                    manager.incrementPointer4();\r\n                    PNG_END = manager.ptr - 8;\r\n                    const u32 PNG_SIZE = PNG_END - PNG_START;\r\n                    thumbnail.allocate(PNG_SIZE + 8);\r\n                    memcpy(thumbnail.data, PNG_START, PNG_SIZE);\r\n                    return;\r\n                }\r\n\r\n                manager.incrementPointer(chunkLength + 4);\r\n                continue;\r\n            }\r\n\r\n            PNG_END = manager.ptr - 8;\r\n            {\r\n                const u32 PNG_SIZE = PNG_END - PNG_START;\r\n                thumbnail.allocate(PNG_SIZE + 12);\r\n                memcpy(thumbnail.data, PNG_START, PNG_SIZE);\r\n                memcpy(thumbnail.data + PNG_SIZE, &IEND_DAT[0], 12);\r\n            }\r\n\r\n\r\n            // add thumbnail\r\n\r\n            size_t length = 0;\r\n\r\n            while (true) {\r\n                std::string key;\r\n                std::string text;\r\n\r\n\r\n                u8 nextChar;\r\n                while ((nextChar = manager.readInt8()) != 0) {\r\n                    key += static_cast<char>(nextChar);\r\n                }\r\n                length += key.size() + 1;\r\n\r\n                while ((nextChar = manager.readInt8()) != 0 && chunkLength != length) {\r\n                    text += static_cast<char>(nextChar);\r\n                    length++;\r\n                }\r\n\r\n                if (key == \"4J_SEED\") {\r\n                    seed = stringToInt64(text);\r\n                } else if (key == \"4J_HOSTOPTIONS\") {\r\n                    hostoptions = stringToHex(text);\r\n                } else if (key == \"4J_TEXTUREPACK\") {\r\n                    texturepack = stringToHex(text);\r\n                } else if (key == \"4J_EXTRADATA\") {\r\n                    extradata = stringToHex(text);\r\n                } else if (key == \"4J_#LOADS\") {\r\n                    loads = stringToHex(text);\r\n                } else if (key == \"4J_EXPLOREDCHUNKS\") {\r\n                    exploredchunks = stringToHex(text);\r\n                }\r\n                // } else if (key == \"4J_BASESAVENAME\") {\r\n                    // basesavename = text;\r\n\r\n                if (chunkLength != length) {\r\n                    length++;\r\n                } else {\r\n                    manager.decrementPointer(1);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    int FileInfo::writeFile(const std::string& outFileStr, const CONSOLE console) const {\r\n        if (thumbnail.data == nullptr) {\r\n            return FILE_ERROR;\r\n        }\r\n\r\n        DataManager header;\r\n        if (console == CONSOLE::SWITCH) {\r\n            const Data fileHeader(528);\r\n            header.take(fileHeader);\r\n        }\r\n\r\n        else if (console == CONSOLE::WIIU) {\r\n            const Data fileHeader(256);\r\n            header.take(fileHeader);\r\n            header.writeWString(basesavename, 128);\r\n\r\n        } else {\r\n            // ps3, psvita,\r\n        }\r\n\r\n\r\n\r\n        std::vector<u8> tEXt_chunk;\r\n        {\r\n            auto appendString = [&](const std::string& str) {\r\n                tEXt_chunk.insert(tEXt_chunk.end(), str.begin(), str.end());\r\n            };\r\n            auto addNull = [&]() {\r\n                tEXt_chunk.push_back('\\0');\r\n            };\r\n\r\n            appendString(\"tEXt\");\r\n\r\n            appendString(\"4J_SEED\");\r\n            addNull();\r\n            appendString(int64ToString(seed));\r\n            addNull();\r\n\r\n            appendString(\"4J_HOSTOPTIONS\");\r\n            addNull();\r\n            appendString(hexToString(hostoptions));\r\n            addNull();\r\n\r\n            appendString(\"4J_TEXTUREPACK\");\r\n            addNull();\r\n            appendString(hexToString(texturepack));\r\n            addNull();\r\n\r\n            appendString(\"4J_EXTRADATA\");\r\n            addNull();\r\n            appendString(hexToString(extradata));\r\n\r\n\r\n            if (loads != 0) {\r\n                addNull();\r\n                appendString(\"4J_#LOADS\");\r\n                addNull();\r\n                appendString(hexToString(loads));\r\n            }\r\n\r\n            if (exploredchunks != 0) {\r\n                addNull();\r\n                appendString(\"4J_EXPLOREDCHUNKS\");\r\n                addNull();\r\n                appendString(hexToString(exploredchunks));\r\n            }\r\n\r\n            // addNull();\r\n            // null count might not be right\r\n            // appendString(\"4J_BASESAVENAME\");\r\n            // addNull();\r\n            // appendString(basesavename);\r\n        }\r\n\r\n        const u32 out_size = header.size + (thumbnail.size - 12) + 4 + tEXt_chunk.size() + 4 + 12;\r\n        const Data out(out_size);\r\n        DataManager manager(out);\r\n\r\n        // write header\r\n        if (header.size != 0) {\r\n            memcpy(manager.ptr, header.data, header.size);\r\n            manager.incrementPointer(header.size);\r\n        }\r\n\r\n        // write png data (excluding IEND)\r\n        memcpy(manager.ptr, thumbnail.data, thumbnail.size - 12);\r\n        manager.incrementPointer(thumbnail.size - 12);\r\n\r\n        // write tEXt chunk size\r\n        manager.writeInt32(tEXt_chunk.size() - 4);\r\n\r\n        // write tEXt chunk data\r\n        memcpy(manager.ptr, tEXt_chunk.data(), tEXt_chunk.size());\r\n        manager.incrementPointer(tEXt_chunk.size());\r\n\r\n        // write tEXt chunk crc\r\n        const auto* chunkPtr = reinterpret_cast<const char*>(tEXt_chunk.data());\r\n        const int sizeIn = static_cast<int>(tEXt_chunk.size());\r\n        const u32 crc_val = crc(chunkPtr, sizeIn);\r\n        manager.writeInt32(crc_val);\r\n\r\n        // write IEND png chunk\r\n        memcpy(manager.ptr, &IEND_DAT[0], 12);\r\n\r\n        const int status = manager.writeToFile(outFileStr);\r\n        return status;\r\n\r\n    }\r\n}
===================================================================
diff --git a/LegacyEditor/LCE/FileInfo/FileInfo.cpp b/LegacyEditor/LCE/FileInfo/FileInfo.cpp
--- a/LegacyEditor/LCE/FileInfo/FileInfo.cpp	
+++ b/LegacyEditor/LCE/FileInfo/FileInfo.cpp	
@@ -55,7 +55,6 @@
 
     std::string result;
     while (hex > 0) {
-        // result = n2c(hex % 16) + result;
         result += n2c(hex % 16);
         hex /= 16;
     }
@@ -72,7 +71,6 @@
     num = std::abs(num);
 
     while (num > 0) {
-        // result = static_cast<char>('0' + num % 10) + result;
         result += static_cast<char>('0' + num % 10);
         num /= 10;
     }
